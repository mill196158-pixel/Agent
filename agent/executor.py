import threading
import time
import inspect
from typing import Dict, Any, List, Literal, Optional

from .schema import Plan
from .tools import TOOLS
from .config import STEP_RETRIES
from .utils.watchdog import start_watchdog
from . import llm


ReplanMode = Literal["never", "on_error"]


class Executor:
    """
    –ò—Å–ø–æ–ª–Ω—è–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω (Plan), –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ TOOLS.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ inspect.signature (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ "–º—É—Å–æ—Ä–Ω—ã–º" –ø–æ–ª—è–º –æ—Ç LLM)
    - –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (STEP_RETRIES)
    - –†–µ–ø–ª–∞–Ω:
        * "never"    ‚Äî –±–µ–∑ —Ä–µ–ø–ª–∞–Ω–æ–≤
        * "on_error" ‚Äî —Ä–µ–ø–ª–∞–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ —à–∞–≥–∞ –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    - Watchdog –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    - –ò—Å—Ç–æ—Ä–∏—è —à–∞–≥–æ–≤ self.history
    """

    def __init__(
        self,
        reporter=print,
        replan_mode: ReplanMode = "on_error",
        max_replans: int = 3,
    ):
        self.report = reporter
        self._stop = threading.Event()
        self._watchdog = None

        self.replan_mode: ReplanMode = replan_mode
        self.max_replans = max_replans
        self._replans_done = 0

        self.history: List[Dict[str, Any]] = []

    # ------------------------------
    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # ------------------------------

    def stop(self):
        """–ü—Ä–µ—Ä–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        self._stop.set()

    def run(self, plan: Plan) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞"""
        self._replans_done = 0
        self.report(f"üöÄ –°—Ç–∞—Ä—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {plan.goal}")
        self._watchdog = start_watchdog(self._stop, self.report)

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —à–∞–≥–∏: pydantic.Step ‚Üí dict
        remaining: List[Dict[str, Any]] = [
            s.model_dump() if hasattr(s, "model_dump") else dict(s)
            for s in plan.steps
        ]
        steps_done: List[Dict[str, Any]] = []

        step_idx = 0
        while step_idx < len(remaining):
            if self._stop.is_set():
                self.report("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return False

            step = remaining[step_idx]
            tool = step.get("tool")
            args = step.get("args", {}) or {}

            ok, result = self._run_step(
                idx=len(steps_done) + 1,
                total_from_here=len(steps_done) + len(remaining) - step_idx,
                tool=tool,
                args=args,
            )

            steps_done.append({"tool": tool, "args": args, "ok": ok, "result": result})
            self.history.append(steps_done[-1])

            if not ok or not self._is_result_clear(result):
                # –ø—Ä–æ–≤–∞–ª –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç "–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π"
                if self.replan_mode == "on_error" and self._replans_done < self.max_replans:
                    new_remaining = self._do_replan(
                        plan.goal,
                        steps_done,
                        remaining[step_idx + 1 :],
                        last_result=result,
                    )
                    if new_remaining is not None:
                        remaining = remaining[: step_idx + 1] + new_remaining
                        step_idx += 1
                        continue
                self.report(f"‚ùå –®–∞–≥ –ø—Ä–æ–≤–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω: {tool}")
                return False

            step_idx += 1

        self.report("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return True

    # ------------------------------
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
    # ------------------------------

    def _normalize_args(self, fn, args: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç—Å–µ—á—å –ª–∏—à–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç LLM (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –º—É—Å–æ—Ä—É)"""
        try:
            sig = inspect.signature(fn)
            allowed = sig.parameters.keys()
            return {k: v for k, v in args.items() if k in allowed}
        except Exception:
            return args

    def _is_result_clear(self, result: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–Ω—è—Ç–Ω—ã–π –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        - ok=False ‚Üí –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ
        - –µ—Å—Ç—å reason=... ‚Üí —Ç–æ–∂–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ, –ø—Ä–æ—Å–∏–º LLM —É—Ç–æ—á–Ω–∏—Ç—å
        """
        if not isinstance(result, dict):
            return False
        if not result.get("ok", False):
            return False
        if "reason" in result and result.get("reason"):
            return False
        return True

    def _run_step(self, idx: int, total_from_here: int, tool: str, args: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —à–∞–≥"""
        self.report(f" [{idx}/~{idx+total_from_here-1}] {tool} {args}")
        fn = TOOLS.get(tool)
        if not fn:
            return False, {"error": f"unknown tool {tool}"}

        last_err = None
        for attempt in range(1, STEP_RETRIES + 1):
            try:
                safe_args = self._normalize_args(fn, args or {})
                res = fn(**safe_args)
                if not (isinstance(res, dict) and res.get("ok")):
                    raise RuntimeError(f"step returned {res}")
                self.report(f"  ‚Üí ok ({attempt})")
                return True, res
            except Exception as e:
                last_err = str(e)
                self.report(f"  ! –æ—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∞ {attempt}: {e}")
                time.sleep(0.4)

        return False, {"error": last_err}

    def _do_replan(
        self,
        goal: str,
        steps_done: List[Dict[str, Any]],
        remaining_steps: List[Dict[str, Any]],
        last_result: Dict[str, Any],
    ) -> Optional[List[Dict[str, Any]]]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å —á—Ç–µ–Ω–∏–µ–º —Å–≤–µ–∂–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ AutoCAD). –í–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π remaining –∏–ª–∏ None."""
        try:
            doc_info = TOOLS.get("acad.get_current_doc_info", lambda: {"ok": False})()
            extents = TOOLS.get("acad.get_extents_of_model", lambda: {"ok": False})()

            obs = {
                "last_result": last_result,
                "doc": doc_info.get("doc") if isinstance(doc_info, dict) and doc_info.get("ok") else None,
                "extents": extents if isinstance(extents, dict) and extents.get("ok") else None,
            }

            new_remaining = llm.replan(
                goal=goal,
                steps_done=steps_done,
                remaining_steps=remaining_steps,
                observation=obs,
            )
            if isinstance(new_remaining, list):
                self._replans_done += 1
                self.report(
                    f"üîÅ –†–µ–ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω: –Ω–æ–≤—ã—Ö —à–∞–≥–æ–≤ {len(new_remaining)} "
                    f"(—Ä–µ–ø–ª–∞–Ω {self._replans_done}/{self.max_replans})"
                )
                return new_remaining
            return None
        except Exception as e:
            self.report(f"‚ÑπÔ∏è –†–µ–ø–ª–∞–Ω –ø—Ä–æ–ø—É—â–µ–Ω: {e}")
            return None
