# -*- coding: utf-8 -*-
import os
import json
from openai import OpenAI
from dotenv import load_dotenv
from .schema import Plan, validate_plan

load_dotenv()
_client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    project=os.getenv("OPENAI_PROJECT_ID"),
)

# -----------------------
# SYSTEM PROMPT
# -----------------------
_SYSTEM_PROMPT = """
–¢—ã –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
–ó–∞–¥–∞—á–∞: –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–≥–∏–π JSON-–ø–ª–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

–ü–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏:
1) –í–°–ï–ì–î–ê –≤—ã–∑–≤–∞—Ç—å acad.get_current_doc_info
2) –ó–∞—Ç–µ–º acad.get_extents_of_model (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –±–µ–∑ –Ω–µ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–π –±–∞–∑–æ–≤—É—é —Ñ–∏–≥—É—Ä—É –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –Ω–∏–∂–µ)

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–ù–ò–ß–ï–ì–û –ª–∏—à–Ω–µ–≥–æ):
- acad.get_current_doc_info()
- acad.get_extents_of_model()
- acad.snapshot_model(limit:int)
- acad.list_layers()
- acad.list_entities(limit:int, layer?:str, type_contains?:str)
- acad.ensure_layer(name:str, color:int|str)
- acad.set_current_layer(name:str)
- acad.draw_line(start:[x,y], end:[x,y], layer?:str)
- acad.draw_polyline(points:[[x,y],...], layer?:str, closed?:bool)
- acad.draw_rectangle(base:[x,y], width:float, height:float, layer?:str)
- acad.draw_circle(center:[x,y], radius:float, layer?:str)
- acad.draw_from_model_center(shape:str, size:float, layer?:str)
- acad.measure_bbox_of_largest_closed(layer?:str)
- acad.find_closed_polylines(layer?:str, min_vertices?:int, min_area?:float)
- acad.find_squares(layer?:str, include_lines?:bool, pos_tol?:float, ang_tol_deg?:float, rel_len_tol?:float, min_side?:float, max_count?:int)
- acad.find_squares(layer?:str, include_lines?:bool, pos_tol?:float, ang_tol_deg?:float, rel_len_tol?:float, min_side?:float, max_count?:int, allow_rectangles?:bool)
- acad.inscribe_circles_in_squares(layer_name:str, color:int|str, layer_filter?:str, pos_tol?:float, ang_tol_deg?:float, rel_len_tol?:float, min_side?:float, max_count?:int, allow_rectangles?:bool)
- acad.inscribe_squares_in_circles(layer_name:str, color:int|str, layer_filter?:str, max_count?:int)
- acad.draw_triangle_roof_over_largest_square(layer_source?:str, layer_result?:str, height_ratio?:float, overhang?:float)
 - acad.draw_triangle_roof_over_largest_square(layer_source?:str, layer_result?:str, height_ratio?:float, overhang?:float)
 - acad.find_circles(layer?:str, min_radius?:float, max_count?:int)
 - acad.pick_largest_circle(layer?:str)
 - acad.make_snowman_from_circle(layer_source?:str, layer_result?:str, color?:int|str, middle_scale?:float, head_scale?:float, gap_ratio?:float, eye_scale?:float)
 - acad.make_snowman_from_circle(layer_source?:str, layer_result?:str, color?:int|str, middle_scale?:float, head_scale?:float, gap_ratio?:float, eye_scale?:float, draw_arms?:bool, draw_legs?:bool, hand_scale?:float, foot_scale?:float)
 - acad.copy_all_on_layer_by_offset(source_layer:str, dx?:float, dy?:float, target_layer?:str, limit?:int)
- acad.get_center_of_model()
- acad.erase_by_handles(handles:[str])
- acad.erase_all_on_layer(layer:str)
- acad.erase_by_filter(type_contains?:str, layer?:str, limit?:int)
- acad.zoom_extents()
- acad.save_as(path:str)
- swmm.run_cli(inp_path:str)

–ñ–Å–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:
- –ü–∏—à–∏ –°–¢–†–û–ì–û JSON –ø–æ —Å—Ö–µ–º–µ:
  {
    "goal": "<–∫—Ä–∞—Ç–∫–∞—è —Ü–µ–ª—å>",
    "steps": [
      {"tool": "<–∏–º—è>", "args": {...}},
      ...
    ]
  }
- –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–Ω–µ JSON.
- –ù–ï –í–´–î–£–ú–´–í–ê–¢–¨ –ò–ù–°–¢–†–£–ú–ï–ù–¢–´. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ.
- –ï—Å–ª–∏ —Ü–µ–ª—å —è–≤–Ω–æ "–≤–ø–∏—Å–∞—Ç—å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç—ã" (–∏–ª–∏ —Å—Ö–æ–∂–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏),
  –ø–æ—Å–ª–µ ensure_layer/set_current_layer –°–†–ê–ó–£ –≤—ã–∑—ã–≤–∞–π:
  acad.inscribe_circles_in_squares(layer_name:"<–Ω—É–∂–Ω—ã–π —Å–ª–æ–π>", color:"yellow", layer_filter?: "<–µ—Å–ª–∏ –Ω—É–∂–Ω–æ>").
  –ù–µ –ø—ã—Ç–∞–π—Å—è –≤—Ä—É—á–Ω—É—é —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –ø–æ –ª–∏–Ω–∏—è–º ‚Äî –∑–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç find_squares –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
- –í –∫–æ–Ω—Ü–µ –ø–æ–ª–µ–∑–Ω–æ —Å–¥–µ–ª–∞—Ç—å acad.zoom_extents().
 - –ü–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤–ø–∏—Å—ã–≤–∞–Ω–∏–µ–º –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–µ–π –≤ —Ç–æ—Ç –∂–µ —Å–ª–æ–π ‚Äî –æ—á–∏—Å—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã:
   –¥–æ–±–∞–≤—å —à–∞–≥ acad.erase_by_filter(type_contains:"CIRCLE", layer:"<—Ç–æ—Ç –∂–µ —Å–ª–æ–π>") –¥–æ –≤—ã–∑–æ–≤–∞ inscribe_circles_in_squares.
 - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏, –≤—ã–∑—ã–≤–∞–π acad.inscribe_circles_in_squares(..., allow_rectangles:true).
 - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤–ø–∏—Å–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç—ã –≤ –∫—Ä—É–≥–∏, –≤—ã–∑—ã–≤–∞–π acad.inscribe_squares_in_circles(...).
 - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç "—Å–Ω–µ–≥–æ–≤–∏–∫–∞" –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π:
   acad.make_snowman_from_circle(layer_source?:"<—Å–ª–æ–π —Å –∫—Ä—É–≥–∞–º–∏>", layer_result:"SNOWMAN", color:"white").
 - –ï—Å–ª–∏ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ ¬´—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å/—Å–¥–≤–∏–Ω—É—Ç—å¬ª —Å–ª–æ–π —Å–æ —Å–Ω–µ–≥–æ–≤–∏–∫–æ–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π
   acad.copy_all_on_layer_by_offset(source_layer:"SNOWMAN", dx: <—Å–º–µ—â–µ–Ω–∏–µ>, target_layer?:"SNOWMAN_COPY").
"""

# -----------------------
# REPLANNER PROMPT
# -----------------------
_REPLANNER_PROMPT = """
–¢—ã –∞–≥–µ–Ω—Ç-–¥–æ–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∏–∑–º–µ–Ω–Ω–∞.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
- steps_done: —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏
- remaining_steps: –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —à–∞–≥–∏
- observation: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞ + –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (doc, extents)

–í–µ—Ä–Ω–∏ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞–≥–æ–≤ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{ "steps": [ {"tool":"...", "args":{...}}, ... ] }

–ü–†–ê–í–ò–õ–ê –†–ï–ü–õ–ê–ù–ê:
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π steps_done.
- –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.
- –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –¥–æ–±–∞–≤—å acad.get_current_doc_info –∏/–∏–ª–∏ acad.get_extents_of_model.
- –ï—Å–ª–∏ ¬´–Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–∏–ª–∏–Ω–∏–π¬ª ‚Äî –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞–π: –∏—Å–ø–æ–ª—å–∑—É–π acad.find_squares(include_lines:true)
  –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏ acad.inscribe_circles_in_squares(...) ‚Äî –æ–Ω —Å–∞–º –∏—â–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç—ã (–∏ –∏–∑ –ø–æ–ª–∏–ª–∏–Ω–∏–π, –∏ –∏–∑ –ª–∏–Ω–∏–π).
- –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ç–µ–∫—Å—Ç–∞.
"""

def interpret(task_text: str) -> Plan:
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –≤ JSON-–ø–ª–∞–Ω."""
    models = ["gpt-5-mini", "gpt-4o-mini"]
    last_err = None

    for model in models:
        try:
            resp = _client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": _SYSTEM_PROMPT},
                    {"role": "user", "content": task_text},
                ],
            )
            raw = resp.choices[0].message.content.strip()
            data = json.loads(raw)
            plan = validate_plan(data)
            print(f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
            return plan
        except Exception as e:
            last_err = e
            print(f"‚ö†Ô∏è {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            continue

    raise RuntimeError(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏: {last_err}")

def replan(goal: str, steps_done: list, remaining_steps: list, observation: dict) -> list:
    """–ó–∞–ø—Ä–æ—Å –∫ LLM –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞–≥–æ–≤."""
    models = ["gpt-5-mini", "gpt-4o-mini"]
    payload = {
        "goal": goal,
        "steps_done": steps_done,
        "remaining_steps": remaining_steps,
        "observation": observation,
    }

    for model in models:
        try:
            resp = _client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": _REPLANNER_PROMPT},
                    {"role": "user", "content": json.dumps(payload, ensure_ascii=False)},
                ],
            )
            raw = resp.choices[0].message.content.strip()
            data = json.loads(raw)
            steps = data.get("steps", [])
            print(f"üîÅ –†–µ–ø–ª–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {model}, –æ—Å—Ç–∞–ª–æ—Å—å —à–∞–≥–æ–≤: {len(steps)}")
            return steps
        except Exception as e:
            print(f"‚ö†Ô∏è replan: {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            continue

    return remaining_steps
